!function(a){function b(a){return new Promise((b,c)=>crypto.subtle?void crypto.subtle.generateKey({name:"RSA-OAEP",modulusLength:1024,publicExponent:new Uint8Array([1,0,1]),hash:{name:"SHA-512"}},!0,["encrypt","decrypt"]).then(a=>{crypto.subtle.exportKey("pkcs8",a.privateKey).then(d=>{crypto.subtle.exportKey("spki",a.publicKey).then(a=>{b([a,d].map(a=>btoa(String.fromCharCode(...new Uint8Array(a)))))}).catch(a=>c(a))}).catch(a=>c(a))}).catch(a=>c(a)):void b([a.getPublicKeyB64(),a.getPrivateKeyB64()]))}function c(a){return new Promise(b=>{const c=new FileReader;c.readAsArrayBuffer(a),c.onload=()=>{const a=CryptoJS.lib.WordArray.create(c.result);b(k(a))}})}const d="\u206A\u206E\u206B\u206D\u202A",e="\u206A\u206E\u206B\u206D\u202A",f="\u206D\u202A\u206B\u206A\u206E",g=CryptoJS.AES,h=CryptoJS.enc,i=CryptoJS.mode.CBC,j=CryptoJS.pad.Pkcs7,k=(a,b)=>CryptoJS.HmacMD5(a,b||d)+"",l=(a,b)=>CryptoJS.HmacSHA224(a,b||d)+"",m=(a,b)=>CryptoJS.HmacSHA384(a,b||d)+"",n=(a,b)=>CryptoJS.HmacSHA512(a,b||d)+"";a.encrypt=a.exclude=!0,a.secure=!1,JSON.toJSON=function(a){if(!(a instanceof FormData))return a;const b={};for(const c of a.keys()){const d=a.getAll(c);null!=d&&(b[c]=1===d.length?d[0]:d)}return b},JSON.toForm=function(a){if(a instanceof FormData)return a;const b=new FormData;for(let c of Object.keys(a))null!=a[c]&&b.append(c,a[c]);return b},CryptoJS.encrypt=function(a,b){if(null==a)return"";if(["string","number","boolean"].includes(typeof a))return(a+"").encrypt();if(a instanceof Blob)throw Error("Not supported blob type");if(Array.isArray(a))return a.join("\u1000").encrypt();const c=[],d=[];if(b)for(const a in b)b.hasOwnProperty(a)&&a&&(b[a].encrypt&&c.push(a),b[a].exclude&&d.push(a));const e=JSON.toForm(a);d.forEach(a=>e.delete(a)),e.set("sign",CryptoJS.sign(e));for(const d of e.keys()){const a=e.get(d);a instanceof Blob||e.set(d,c.includes(d)?CryptoJS.encrypt(a):a)}return a instanceof FormData?e:JSON.toJSON(e)},CryptoJS.exchange=d=>new Promise((o,p)=>{const q=new JSEncrypt;fetch("/secure").then(async a=>{const b=await a.blob();if(!!b.type)throw"Invalid request data";const c=new zip.ZipReader(new zip.BlobReader(b));for(const b of await c.getEntries()){const c=btoa(String.fromCharCode(...(await b.getData(new zip.Uint8ArrayWriter)))),d=new Date(a.headers.get("Date")).getTime()/1e3,e=d+"";if(Math.abs(Date.now()/1e3-d)<15&&l(c,e).concat(m(btoa(e),"\u202A\u206D\u206B\u206A\u206E"))===b.filename)return c}throw"No key available to match"}).then(async a=>{const c=await b(q);q.setKey(a);const d=c[0].length>>1,e=a=>Array.from(q.encrypt(a)).map(a=>a.charCodeAt(0).toString(35)).map(a=>2>a.length?"0"+a:a).join("");return function*(){yield n(c[0]).toUpperCase(),yield k(a),yield*[e(c[0].substr(0,d)),e(c[0].substr(d))],yield c[1]}()}).then(async(a)=>fetch("/secure",{method:"POST",headers:{"Content-Type":"application/json","SHA-512":a.next().value,Digest:a.next().value},body:(a.next().value+"z"+a.next().value).toUpperCase()}).then(async a=>{const b=await a.text();if(!b)throw"Invalid request data";return b}).then(b=>{q.setKey(a.next().value);const c=btoa(b.match(/\w{2}/g).map(b=>String.fromCharCode(parseInt(b,16))).join(""));return h.Utf8.parse(q.decrypt(c))}).catch(a=>{throw a})).then(b=>{function d(){const a=function*(){yield{iv:h.Hex.parse((b+"").slice(0,32))},yield{mode:i},yield{pad:j}}();let c,d={};for(;!(c=a.next()).done;){const a=Object.keys(c.value)[0];d[a]=c.value[a]}return d}String.prototype.encrypt=function(){const a=(Math.floor(1030792151040*Math.random())+68719476736).toString(16);let c=g.encrypt(a.concat(this),b,d())+"";return[[/\+/g,"-"],[/\//g,"_"],[/=/g,""]].forEach(a=>c=c.replace(a[0],a[1])),"<"+c+">"},String.prototype.decrypt=function(){return g.decrypt(this+"",b,d()).toString(h.Utf8)},CryptoJS.sign=function(...a){let b=[],c=Date.now().toString(36);for(const c of a)!function a(c){c instanceof Blob||(["string","number","boolean"].includes(typeof c)?b.push(c+""):Array.isArray(c)?b.push(c.join("\u1000")):Object.values(JSON.toJSON(c)).forEach(b=>a(b)))}(c);return(c+e+k(b.join(f),c)).encrypt()},CryptoJS.signBlob=async function(...a){const b=[],d=Date.now().toString(16),g=(c,a)=>c instanceof Blob&&!(a instanceof Blob)?1:-1;for(const d of a.sort(g))!(await async function a(d){if(["string","number","boolean"].includes(typeof d))b.push(d+"");else if(d instanceof Blob)b.push(await c(d));else if(Array.isArray(d))b.push(d.join("\u1000"));else for(const b of Object.values(JSON.toJSON(d)).sort(g))await a(b)}(d));return(d+e+k(b.join(f),d)).encrypt()},q.setKey(void 0),a.secure=!0,o()}).catch(a=>{d&&d.always&&CryptoJS.exchange(d),p(a)})})}(window);